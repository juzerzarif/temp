apply plugin: 'com.android.application'
apply plugin: 'cernerdeploy'
apply plugin: 'jacoco'
apply plugin: 'newrelic'

sourceCompatibility = '1.8'
project.ext.set("defaultNewRelicAppToken", "\"AAe796c04df66004ecba442c520c48d7250ddcb01b\"")
project.ext.set("releaseNewRelicAppToken", "\"AA00f0e00661d0e26d031f69244045fd416a19b0f4\"")

dependencies {
    implementation 'com.cerner.cura.base:cura-base:1.27.1'
    implementation 'com.cerner.cura.ui.elements:cura-ui-elements:1.27.0'
    implementation 'com.cerner.cura.medications:cura-medications:2.5.0'
    implementation 'com.cerner.cura.scanning:cura-scanning:2.4.0'
    implementation 'com.cerner.cura.device_association:cura-device-association:1.21.0-SNAPSHOT'
    implementation 'com.cerner.cura.vitals:cura-vitals:1.19.0'
    implementation 'com.cerner.cura.demographics:cura-demographics:1.17.0'
    implementation 'com.cerner.cura.ppr:cura-ppr:1.15.0'
    implementation 'com.cerner.cura.items_for_review:cura-items-for-review:1.15.0'
    implementation 'com.cerner.cura.allergies:cura-allergies:1.13.0'
    implementation 'com.cerner.nursing.collections:specimen-collections-android:1.0.1'
    implementation 'com.cerner.cura.charting.navigator:cura-charting-navigator:0.1.0'

    implementation 'com.cerner.careaware.connect:android-connect-contacts:2.14.0@aar'
    implementation 'com.cerner.careaware.connect:android-connect-contacts-model:2.5.2@jar'
    implementation "com.newrelic.agent.android:android-agent:$rootProject.ext.newRelicVersion"

    //TODO temp until framework updates
    implementation 'com.android.volley:volley:1.1.1'

    //debugImplementation 'com.squareup.leakcanary:leakcanary-android:1.3.1'

    testImplementation 'com.cerner.cura.test:cura-test-helpers:1.7.1'
}

android {
    dexOptions {
        preDexLibraries true
    }

    compileSdkVersion project.ext.get('compileSdkVersion')
    buildToolsVersion project.ext.get('buildToolsVersion')

    defaultConfig {
        manifestPlaceholders = [appName: "Nursing", appNameSuffix: ""]
        minSdkVersion project.ext.get('minSdkVersion')
        targetSdkVersion project.ext.get('targetSdkVersion')
        versionCode project.ext.get('versionCode')
        versionName project.ext.get('versionName')

        buildConfigField "boolean", "ALLOW_MOCK_DATA", "false"
        buildConfigField "boolean", "FORCE_MOCK_DATA", "false"
        buildConfigField "String", "MOCK_BRANCH", "\"dev\""
        buildConfigField "boolean", "SHOW_ALWAYS_CONNECTED", "false"
        buildConfigField "String[]", "MOCK_FEATURES", "new String[]{\"feature/useMock\", \"android/can_view_care_team\", \"android/can_chart_vitals\"}"
        buildConfigField "String[]", "MOCK_CAPABILITIES", "new String[]{\"device_association\", \"nursing/medication_administration\"}"
        buildConfigField "String", "NEW_RELIC_APP_TOKEN", project.defaultNewRelicAppToken
    }

    packagingOptions {
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/DEPENDENCIES.txt'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/NOTICE.txt'
    }

    compileOptions {
        sourceCompatibility project.ext.get('javaVersion')
        targetCompatibility project.ext.get('javaVersion')
    }

    signingConfigs {
        releaseConfig {
            storeFile file(System.properties['androidSigningCertLocation'])
            storePassword System.properties['keystorePassword']
            keyAlias "cerner_android_key"
            keyPassword System.properties['keystorePassword']
        }
        nonreleaseConfig {
            storeFile file(System.properties['androidNonreleaseSigningCertLocation'])
            storePassword System.properties['nonreleaseKeystorePassword']
            keyAlias "cerner_android_key"
            keyPassword System.properties['nonreleaseKeystorePassword']
        }
    }

    buildTypes {
        debug {
            manifestPlaceholders = [appNameSuffix: "D"]
            signingConfig signingConfigs.nonreleaseConfig
            buildConfigField "boolean", "ALLOW_MOCK_DATA", "true"

            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules-debug.pro'
        }
        release {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    flavorDimensions "domain"

    productFlavors {
        demo {
            dimension "domain"
            manifestPlaceholders = [appName: "Nursing DEMO"]
            applicationId "com.cerner.nursing.nursing.demo"
            signingConfig signingConfigs.nonreleaseConfig
            buildConfigField "boolean", "FORCE_MOCK_DATA", "true"
            buildConfigField "String", "MOCK_BRANCH", "\"demo\""
            buildConfigField "boolean", "SHOW_ALWAYS_CONNECTED", "true"
        }
        dev {
            dimension "domain"
            manifestPlaceholders = [appName: "Nursing Dev"]
            applicationId "com.cerner.nursing.nursing.dev"
            signingConfig signingConfigs.nonreleaseConfig
        }
        staging {
            dimension "domain"
            manifestPlaceholders = [appName: "Nursing Stg"]
            applicationId "com.cerner.nursing.nursing.staging"
            signingConfig signingConfigs.nonreleaseConfig
        }
        sandbox {
            dimension "domain"
            manifestPlaceholders = [appName: "Nursing Snd"]
            applicationId "com.cerner.nursing.nursing.sandbox"
            signingConfig signingConfigs.nonreleaseConfig
        }
        cert {
            dimension "domain"
            manifestPlaceholders = [appName: "Nursing Cert"]
            applicationId "com.cerner.nursing.nursing.cert"
            signingConfig signingConfigs.nonreleaseConfig
        }
        offlineProd {
            dimension "domain"
            manifestPlaceholders = [appName: "Nursing Offline"]
            applicationId "com.cerner.nursing.nursing"
            signingConfig signingConfigs.nonreleaseConfig
            buildConfigField "String", "NEW_RELIC_APP_TOKEN", project.releaseNewRelicAppToken
        }
        internalProd {
            dimension "domain"
            manifestPlaceholders = [appName: "Nursing Internal"]
            applicationId "com.cerner.nursing.nursing.internal"
            signingConfig signingConfigs.releaseConfig
            buildConfigField "String", "NEW_RELIC_APP_TOKEN", project.releaseNewRelicAppToken
        }
        production {
            dimension "domain"
            applicationId "com.cerner.nursing.nursing"
            signingConfig signingConfigs.releaseConfig
            buildConfigField "String", "NEW_RELIC_APP_TOKEN", project.releaseNewRelicAppToken
        }
    }

    testOptions {
        unitTests.returnDefaultValues = true
        unitTests.includeAndroidResources = true

        unitTests.all {
            jvmArgs '-Xss2m', '-Xmx4g'

            //So that every test forks but only 1 fork ever
            maxParallelForks = 1
            forkEvery = 1

            testLogging {
                showStackTraces = true
                exceptionFormat = "full"
                events 'passed'
            }
        }
    }
}

jacoco {
    toolVersion = "0.7.2.201409121644"
}

task downloadMockData {
    final def sourceUrl = new URL('https://github.cerner.com/Cura/CuraTestData/archive/demo.zip')
    final File targetFile = new File('cura-clinical-app/src/demo/assets/mock.zip')

    if (targetFile.exists()) {
        targetFile.delete()
    } else if (!targetFile.getParentFile().exists()) {
        targetFile.getParentFile().mkdirs()
    }

    if (!targetFile.createNewFile()) {
        throw new FileNotFoundException("Could not create file in the specified location")
    }

    if (sourceUrl.getFile().length() == 0) {
        throw new FileNotFoundException("Mock data zip file not found in the given location")
    }

    try {
        downloadFile(targetFile, sourceUrl)
    } catch(final Exception ex) {
        println ex.toString() + " when downloading update mock data."
    }

    if (!targetFile.exists()) {
        throw new FileNotFoundException("Mock data zip file could not be downloaded successfully")
    }
}

/* Function to download a file from a given review */
static def downloadFile(final File targetFile, final URL sourceUrl) throws SocketException {
    sourceUrl.withInputStream { final is ->
        targetFile.withOutputStream { final os ->
            final def bs = new BufferedOutputStream(os)
            bs << is
        }
    }
}

task jacocoTestReport(type: JacocoReport) {
    group = "Reporting"
    description = "Generate Jacoco coverage reports after running tests."

    classDirectories.from = fileTree(dir: "${buildDir}/intermediates/classes/dev/debug/com/cerner",
            excludes: ['**/R$*',
                       '**/R.class*',
                       '**/BuildConfig.class',
                       '**/Manifest.class',
                       '**/Manifest$*']
    )

    executionData.from = files("${buildDir}/jacoco/testDevDebugUnitTest.exec")
    sourceDirectories.from = files("${projectDir}/src/main/java")

    reports {
        xml.enabled = false
        csv.enabled = false
        html.destination = file("${buildDir}/reports/jacoco")
    }
}

artifacts {
    archives file('build/outputs/apk/dev/release/cura-clinical-app-dev-release.apk')
    archives file('build/outputs/apk/staging/release/cura-clinical-app-staging-release.apk')
    archives file('build/outputs/apk/cert/release/cura-clinical-app-cert-release.apk')
    archives file('build/outputs/apk/sandbox/release/cura-clinical-app-sandbox-release.apk')
    archives file('build/outputs/apk/offlineProd/release/cura-clinical-app-offlineProd-release.apk')
    archives file('build/outputs/apk/internalProd/release/cura-clinical-app-internalProd-release.apk')
    archives file('build/outputs/apk/production/release/cura-clinical-app-production-release.apk')
    archives file('build/outputs/apk/dev/debug/cura-clinical-app-dev-debug.apk')
    archives file('build/outputs/apk/staging/debug/cura-clinical-app-staging-debug.apk')
    archives file('build/outputs/apk/cert/debug/cura-clinical-app-cert-debug.apk')
    archives file('build/outputs/apk/sandbox/debug/cura-clinical-app-sandbox-debug.apk')
    archives file('build/outputs/apk/offlineProd/debug/cura-clinical-app-offlineProd-debug.apk')
    archives file('build/outputs/apk/internalProd/debug/cura-clinical-app-internalProd-debug.apk')
    archives file('build/outputs/apk/production/debug/cura-clinical-app-production-debug.apk')
}

uploadArchives {
    repositories.mavenDeployer {
        addFilter('dev-release-apk') { final artifact, final file ->
            artifact.name == 'cura-clinical-app-dev-release'
        }

        addFilter('staging-release-apk') { final artifact, final file ->
            artifact.name == 'cura-clinical-app-staging-release'
        }

        addFilter('cert-release-apk') { final artifact, final file ->
            artifact.name == 'cura-clinical-app-cert-release'
        }

        addFilter('sandbox-release-apk') { final artifact, final file ->
            artifact.name == 'cura-clinical-app-sandbox-release'
        }

        addFilter('offlineProd-release-apk') { final artifact, final file ->
            artifact.name == 'cura-clinical-app-offlineProd-release'
        }

        addFilter('internalProd-release-apk') { final artifact, final file ->
            artifact.name == 'cura-clinical-app-internalProd-release'
        }

        addFilter('production-release-apk') { final artifact, final file ->
            artifact.name == 'cura-clinical-app-production-release'
        }

        addFilter('dev-debug-apk') { final artifact, final file ->
            artifact.name == 'cura-clinical-app-dev-debug'
        }

        addFilter('staging-debug-apk') { final artifact, final file ->
            artifact.name == 'cura-clinical-app-staging-debug'
        }

        addFilter('cert-debug-apk') { final artifact, final file ->
            artifact.name == 'cura-clinical-app-cert-debug'
        }

        addFilter('sandbox-debug-apk') { final artifact, final file ->
            artifact.name == 'cura-clinical-app-sandbox-debug'
        }

        addFilter('offlineProd-debug-apk') { final artifact, final file ->
            artifact.name == 'cura-clinical-app-offlineProd-debug'
        }

        addFilter('internalProd-debug-apk') { final artifact, final file ->
            artifact.name == 'cura-clinical-app-internalProd-debug'
        }

        addFilter('production-debug-apk') { final artifact, final file ->
            artifact.name == 'cura-clinical-app-production-debug'
        }

        pom('dev-release-apk').artifactId = 'cura-clinical-app-dev-release'
        pom('staging-release-apk').artifactId = 'cura-clinical-app-staging-release'
        pom('cert-release-apk').artifactId = 'cura-clinical-app-cert-release'
        pom('sandbox-release-apk').artifactId = 'cura-clinical-app-sandbox-release'
        pom('offlineProd-release-apk').artifactId = 'cura-clinical-app-offlineProd-release'
        pom('internalProd-release-apk').artifactId = 'cura-clinical-app-internalProd-release'
        pom('production-release-apk').artifactId = 'cura-clinical-app'

        pom('dev-debug-apk').artifactId = 'cura-clinical-app-dev-debug'
        pom('staging-debug-apk').artifactId = 'cura-clinical-app-staging-debug'
        pom('cert-debug-apk').artifactId = 'cura-clinical-app-cert-debug'
        pom('sandbox-debug-apk').artifactId = 'cura-clinical-app-sandbox-debug'
        pom('offlineProd-debug-apk').artifactId = 'cura-clinical-app-offlineProd-debug'
        pom('internalProd-debug-apk').artifactId = 'cura-clinical-app-internalProd-debug'
        pom('production-debug-apk').artifactId = 'cura-clinical-app-production-debug'
    }
}

cernerDeploy {
    siteDirs = ["${buildDir}/reports/", "${buildDir}/docs/"]
}

afterEvaluate { final project ->
    project.getTasksByName('generateDemoDebugAssets', true).plus(project.getTasksByName('generateDemoReleaseAssets', true)).each { final task ->
        task.dependsOn('downloadMockData')
    }
}

if (System.getProperty("skipNewRelicUpload")) {
    tasks.all { final task ->
        //noinspection UnnecessaryQualifiedReference
        if (task instanceof com.newrelic.agent.android.NewRelicMapUploadTask) {
            task.onlyIf {
                println 'Skipping New Relic Upload...'
                return false
            }
        }
    }
}

jacocoTestReport.dependsOn(':cura-clinical-app:testDevDebugUnitTest')

uploadSite.dependsOn(':cura-clinical-app:assemble')
uploadSite.dependsOn(':cura-clinical-app:jacocoTestReport')
uploadSite.dependsOn(':cura-clinical-app:lint')